import fs = std.file;
import std.algorithm;
import std.getopt;
import std.path;
import std.process;
import std.stdio;
import std.string;

string templateBaseDir;
void main(string[] args)
{
	templateBaseDir = dirName(args[0]);

	string codeTemplate = "vibe";

	auto options = args.getopt();
	if (options.helpWanted)
	{
		defaultGetoptPrinter("DORM package initializer", options.options);
		return;
	}

	if (args.length > 1)
		codeTemplate = args[1];

	runInit(codeTemplate);
}

void runInit(string codeTemplate)
{
	switch (codeTemplate)
	{
	case "base":
		copyTemplate("base");
		break;
	case "vibe":
		copyTemplate("base");
		copyTemplate(codeTemplate);
		dubAdd("vibe-d");
		break;
	default:
		writeln("Unknown DORM init template: ", codeTemplate);
		writeln("Allowed template types:");
		writeln("- base");
		writeln("- vibe");
		return;
	}
	dubAdd("dorm:build-models");
	addGitIgnore();
}

void copyTemplate(string name)
{
	auto srcDir = buildPath(templateBaseDir, "templates", name);
	if (!srcDir.endsWith(dirSeparator))
		srcDir ~= dirSeparator;
	auto dstDir = fs.getcwd;
	writeln("> cp -r ", srcDir, "* ", dstDir);

	foreach (file; fs.dirEntries(srcDir, fs.SpanMode.breadth))
	{
		if (file.baseName == ".gitkeep")
			continue;
		auto target = file.name;
		if (target.startsWith(srcDir))
			target = target[srcDir.length .. $];
		target = buildPath(dstDir, target);

		if (file.isDir)
		{
			if (!fs.exists(target))
				fs.mkdir(target);
		}
		else
		{
			fs.copy(file, target);
		}
	}
}

void dubAdd(string pkg)
{
	writeln("> dub add ", pkg);
	if (spawnProcess(["dub", "add", pkg]).wait != 0)
		stderr.writeln("Failed to add package ", pkg, "!");
}

void addGitIgnore()
{
	auto path = buildPath(fs.getcwd, ".gitignore");
	auto file = File(path, "a");
	file.writeln("# DORM specific");
	file.writeln("# - auto generated by dorm:build-models sub-package as preBuildCommand (used by the auto-migrator)");
	file.writeln(".models.json");
	file.writeln("# - machine-specific database connection information");
	file.writeln("database.toml");
	file.writeln();
	file.writeln("*.sqlite3*");
	file.writeln();
}
